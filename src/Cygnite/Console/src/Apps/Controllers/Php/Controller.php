namespace {%Apps%}\Controllers;

use {%Apps%}\Form\%ControllerName%Form;
use {%Apps%}\Models\%StaticModelName%;
use Cygnite\Common\UrlManager\Url;
use Cygnite\Http\Requests\Request;
use Cygnite\Http\Responses\Response;
use Cygnite\Http\Responses\ResponseInterface;
use Cygnite\Mvc\Controller\AbstractBaseController;

/**
* This file is generated by Craft Console's Crud Generator
* You may alter code to fit your need
*/

class {%ControllerClassName%}Controller extends AbstractBaseController
{
   /**
    | --------------------------------------------------------------------------
    | The %ControllerName% Controller
    |--------------------------------------------------------------------------
    |  This controller respond to uri beginning with %controllerName% and also
    |  respond to root url like "%controllerName%/index"
    |
    | Your GET request of "%controllerName%/index" will respond like below -
    |
    |     public function indexAction() : ResponseInterface
    |     {
    |         return Response::make("Cygnite : Hello World!!");
    |     }
    |
    */

    // Plain layout
    protected $layout = 'layouts.base';

    /**
    * Your constructor.
    * @access public
    */
    public function __construct()
    {

    }

    /**
    * Default method for your controller. Render index page into browser.
    *
    * @access public
    * @return void
    */
    public function indexAction() : ResponseInterface
    {
        $%controllerName% = [];
        $%controllerName% = %StaticModelName%::all(['orderBy' => '{%primaryKey%} desc',
                /*'paginate' => array(
                    'limit' => Url::segment(3)
                )*/]
        );

        $content = $this->view->create('{%Apps%}.Views.%controllerName%.index', [
                    'records' => $%controllerName%,
                    'links' => '', //%StaticModelName%::createLinks(),
                    'title' => 'Cygnite Framework - Crud Application'
        ]);

        return new Response($content);
    }

    /**
    * Add a new %controllerName%
    *
    * @param Request $request
    * @param ProductForm $form
    * @return ResponseInterface
    */
    public function addAction(Request $request, %ControllerName%Form $form) : ResponseInterface
    {
        $form->handleRequest('add', $request);

        //Check is valid request and form submitted
        if ($form->isValidRequest() && $form->isSubmitted('btnSubmit')) {
            $%modelName% = new %StaticModelName%();

            //Run validation
            if ($%modelName%->validate($postArray = $request->post->all())) {

%modelColumns%
                // Save form details
                if ($%modelName%->save()) {
                    $this->setFlash('success', '%ControllerName% added successfully!')
                        ->redirectTo('%controllerName%/index/');
                } else {
                    $this->setFlash('error', 'Error occured while saving %ControllerName%!')
                        ->redirectTo('%controllerName%/index/');
                }

            } else {
                //Set validation instance into form builder to display inline error in form
                //and also you can customize error messages and retrieve form errors using form object.
                $form->setValidator($%modelName%->getValidator());
            }
        }

        // We can also use same view page for create and update
        $content = $this->view->create('{%Apps%}.Views.%controllerName%.create', [
                    'form' => $form->render(),
                    'validation_errors' => $form->getValidationErrors(),
                    'title' => 'Add a new %ControllerName%'
        ]);

        return new Response($content);
    }

    /**
     * Update a %controllerName%
     *
     * @param Request $request
     * @param $id
     * @return ResponseInterface
     */
    public function editAction(Request $request, $id) : ResponseInterface
    {
        $%modelName% = null;
        $%modelName% = %StaticModelName%::find($id);
        $form = new %ControllerName%Form($%modelName%, Url::segment(3));
        $form->handleRequest('edit', $request);

        //Check is valid request and form submitted
        if ($form->isValidRequest() && $form->isSubmitted('btnSubmit')) {

            //Run validation
            if ($%modelName%->validate($postArray = $request->post->all())) {

%modelColumns%
                // Save form information
                if ($%modelName%->save()) {
                    $this->setFlash('success', '%ControllerName% updated successfully!')
                        ->redirectTo('%controllerName%/index/');
                } else {
                    $this->setFlash('error', 'Error occured while saving %ControllerName%!')
                        ->redirectTo('%controllerName%/index/');
                }

            } else {
                //validation error here.
                // We will set the validator object into form. So that we can easily
                // manipulate validation errors before rendering into browser.
                $form->setValidator($%modelName%->getValidator());
            }
        }

        $content = $this->view->create('{%Apps%}.Views.%controllerName%.update', [
                    'form' => $form->render(),
                    'validation_errors' => $form->getValidationErrors(),
                    'title' => 'Update the %ControllerName%'
        ]);

        return new Response($content);
    }

    /**
     * Display product details by id.
     *
     * @param $id
     * @return Response
     */
    public function showAction($id) : ResponseInterface
    {
        $content = $this->view->create('{%Apps%}.Views.%controllerName%.show', [
                        'record' => %StaticModelName%::find($id),
                        'title' => 'Show the %ControllerName%'
        ]);

        return new Response($content);
    }

    /**
    * Delete %controllerName% using id
    *
    * @param type $id
    */
    public function deleteAction($id)
    {
        $%controllerName% = new %StaticModelName%();

        if ($%controllerName%->trash($id) == true) {
            $this->setFlash('success', '%ControllerName% Deleted Successfully!')
                 ->redirectTo('%controllerName%/');
        } else {
            $this->setFlash('error', 'Error Occured While Deleting %ControllerName%!')
                 ->redirectTo('%controllerName%/');
        }
    }

}//End of your %ControllerName% controller
